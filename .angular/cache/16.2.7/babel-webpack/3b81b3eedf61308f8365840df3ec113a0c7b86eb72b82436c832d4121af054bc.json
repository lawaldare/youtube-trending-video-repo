{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport { sum, isNumberFinite, toDecimal, isNil } from 'ng-zorro-antd/core/util';\nimport * as i1 from '@angular/platform-browser';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzAggregatePipe = /*#__PURE__*/(() => {\n  class NzAggregatePipe {\n    transform(value, method) {\n      if (!Array.isArray(value)) {\n        return value;\n      }\n      if (value.length === 0) {\n        return undefined;\n      }\n      switch (method) {\n        case 'sum':\n          return sum(value);\n        case 'avg':\n          return sum(value) / value.length;\n        case 'max':\n          return Math.max(...value);\n        case 'min':\n          return Math.min(...value);\n        default:\n          throw Error(`Invalid Pipe Arguments: Aggregate pipe doesn't support this type`);\n      }\n    }\n    static #_ = this.ɵfac = function NzAggregatePipe_Factory(t) {\n      return new (t || NzAggregatePipe)();\n    };\n    static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"nzAggregate\",\n      type: NzAggregatePipe,\n      pure: true\n    });\n  }\n  return NzAggregatePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzBytesPipe {\n  static #_ = this.formats = {\n    B: {\n      max: 1024\n    },\n    kB: {\n      max: Math.pow(1024, 2),\n      prev: 'B'\n    },\n    KB: {\n      max: Math.pow(1024, 2),\n      prev: 'B'\n    },\n    MB: {\n      max: Math.pow(1024, 3),\n      prev: 'kB'\n    },\n    GB: {\n      max: Math.pow(1024, 4),\n      prev: 'MB'\n    },\n    TB: {\n      max: Number.MAX_SAFE_INTEGER,\n      prev: 'GB'\n    }\n  };\n  transform(input, decimal = 0, from = 'B', to) {\n    if (!(isNumberFinite(input) && isNumberFinite(decimal) && decimal % 1 === 0 && decimal >= 0)) {\n      return input;\n    }\n    let bytes = input;\n    let unit = from;\n    while (unit !== 'B') {\n      bytes *= 1024;\n      unit = NzBytesPipe.formats[unit].prev;\n    }\n    if (to) {\n      const format = NzBytesPipe.formats[to];\n      const result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n      return NzBytesPipe.formatResult(result, to);\n    }\n    for (const key in NzBytesPipe.formats) {\n      if (NzBytesPipe.formats.hasOwnProperty(key)) {\n        const format = NzBytesPipe.formats[key];\n        if (bytes < format.max) {\n          const result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n          return NzBytesPipe.formatResult(result, key);\n        }\n      }\n    }\n  }\n  static formatResult(result, unit) {\n    return `${result} ${unit}`;\n  }\n  static calculateResult(format, bytes) {\n    const prev = format.prev ? NzBytesPipe.formats[format.prev] : undefined;\n    return prev ? bytes / prev.max : bytes;\n  }\n  static #_2 = this.ɵfac = function NzBytesPipe_Factory(t) {\n    return new (t || NzBytesPipe)();\n  };\n  static #_3 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"nzBytes\",\n    type: NzBytesPipe,\n    pure: true\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/**\n * @deprecated v17.0.0 - Use angular's built-in syntax instead\n */\nlet NzToCssUnitPipe = /*#__PURE__*/(() => {\n  class NzToCssUnitPipe {\n    transform(value, defaultUnit = 'px') {\n      const absoluteLengthUnit = ['cm', 'mm', 'Q', 'in', 'pc', 'pt', 'px'];\n      const relativeLengthUnit = ['em', 'ex', 'ch', 'rem', '1h', 'vw', 'vh', 'vmin', 'vmax'];\n      const percentagesUnit = ['%'];\n      const listOfUnit = [...absoluteLengthUnit, ...relativeLengthUnit, ...percentagesUnit];\n      let unit = 'px';\n      if (listOfUnit.some(u => u === defaultUnit)) {\n        unit = defaultUnit;\n      }\n      return typeof value === 'number' ? `${value}${unit}` : `${value}`;\n    }\n    static #_ = this.ɵfac = function NzToCssUnitPipe_Factory(t) {\n      return new (t || NzToCssUnitPipe)();\n    };\n    static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"nzToCssUnit\",\n      type: NzToCssUnitPipe,\n      pure: true\n    });\n  }\n  return NzToCssUnitPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzEllipsisPipe = /*#__PURE__*/(() => {\n  class NzEllipsisPipe {\n    transform(value, length, suffix = '') {\n      if (typeof value !== 'string') {\n        return value;\n      }\n      const len = typeof length === 'undefined' ? value.length : length;\n      if (value.length <= len) {\n        return value;\n      }\n      return value.substring(0, len) + suffix;\n    }\n    static #_ = this.ɵfac = function NzEllipsisPipe_Factory(t) {\n      return new (t || NzEllipsisPipe)();\n    };\n    static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"nzEllipsis\",\n      type: NzEllipsisPipe,\n      pure: true\n    });\n  }\n  return NzEllipsisPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzSafeNullPipe = /*#__PURE__*/(() => {\n  class NzSafeNullPipe {\n    transform(value, replace = '') {\n      if (isNil(value)) {\n        return replace;\n      }\n      return value;\n    }\n    static #_ = this.ɵfac = function NzSafeNullPipe_Factory(t) {\n      return new (t || NzSafeNullPipe)();\n    };\n    static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"nzSafeNull\",\n      type: NzSafeNullPipe,\n      pure: true\n    });\n  }\n  return NzSafeNullPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzSanitizerPipe = /*#__PURE__*/(() => {\n  class NzSanitizerPipe {\n    constructor(sanitizer) {\n      this.sanitizer = sanitizer;\n    }\n    transform(value, type = 'html') {\n      switch (type) {\n        case 'html':\n          return this.sanitizer.bypassSecurityTrustHtml(value);\n        case 'style':\n          return this.sanitizer.bypassSecurityTrustStyle(value);\n        case 'url':\n          return this.sanitizer.bypassSecurityTrustUrl(value);\n        case 'resourceUrl':\n          return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n        default:\n          throw new Error(`Invalid safe type specified`);\n      }\n    }\n    static #_ = this.ɵfac = function NzSanitizerPipe_Factory(t) {\n      return new (t || NzSanitizerPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n    };\n    static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"nzSanitizer\",\n      type: NzSanitizerPipe,\n      pure: true\n    });\n  }\n  return NzSanitizerPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzTrimPipe = /*#__PURE__*/(() => {\n  class NzTrimPipe {\n    // TODO(chensimeng) trimEnd, trimStart\n    transform(text) {\n      return text.trim();\n    }\n    static #_ = this.ɵfac = function NzTrimPipe_Factory(t) {\n      return new (t || NzTrimPipe)();\n    };\n    static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"nzTrim\",\n      type: NzTrimPipe,\n      pure: true\n    });\n  }\n  return NzTrimPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst pipes = [NzToCssUnitPipe, NzSafeNullPipe, NzSanitizerPipe, NzTrimPipe, NzBytesPipe, NzAggregatePipe, NzEllipsisPipe];\nlet NzPipesModule = /*#__PURE__*/(() => {\n  class NzPipesModule {\n    static #_ = this.ɵfac = function NzPipesModule_Factory(t) {\n      return new (t || NzPipesModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NzPipesModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n  return NzPipesModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzAggregatePipe, NzBytesPipe, NzEllipsisPipe, NzPipesModule, NzSafeNullPipe, NzSanitizerPipe, NzToCssUnitPipe, NzTrimPipe };\n//# sourceMappingURL=ng-zorro-antd-pipes.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}